// Code generated by MockGen. DO NOT EDIT.
// Source: bluetooth.go
//
// Generated by this command:
//
//	mockgen -source=bluetooth.go -destination=mocks/bluetooth.go -package=bluetooth_mocks
//

// Package bluetooth_mocks is a generated GoMock package.
package bluetooth_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	bluetooth "tinygo.org/x/bluetooth"
)

// Mockbluetoothadapter is a mock of bluetoothadapter interface.
type Mockbluetoothadapter struct {
	ctrl     *gomock.Controller
	recorder *MockbluetoothadapterMockRecorder
	isgomock struct{}
}

// MockbluetoothadapterMockRecorder is the mock recorder for Mockbluetoothadapter.
type MockbluetoothadapterMockRecorder struct {
	mock *Mockbluetoothadapter
}

// NewMockbluetoothadapter creates a new mock instance.
func NewMockbluetoothadapter(ctrl *gomock.Controller) *Mockbluetoothadapter {
	mock := &Mockbluetoothadapter{ctrl: ctrl}
	mock.recorder = &MockbluetoothadapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbluetoothadapter) EXPECT() *MockbluetoothadapterMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *Mockbluetoothadapter) Connect(address bluetooth.Address, params bluetooth.ConnectionParams) (bluetooth.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", address, params)
	ret0, _ := ret[0].(bluetooth.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockbluetoothadapterMockRecorder) Connect(address, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*Mockbluetoothadapter)(nil).Connect), address, params)
}

// Scan mocks base method.
func (m *Mockbluetoothadapter) Scan(callback func(*bluetooth.Adapter, bluetooth.ScanResult)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockbluetoothadapterMockRecorder) Scan(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*Mockbluetoothadapter)(nil).Scan), callback)
}

// StopScan mocks base method.
func (m *Mockbluetoothadapter) StopScan() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopScan")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopScan indicates an expected call of StopScan.
func (mr *MockbluetoothadapterMockRecorder) StopScan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopScan", reflect.TypeOf((*Mockbluetoothadapter)(nil).StopScan))
}

// Mockbluetootdevice is a mock of bluetootdevice interface.
type Mockbluetootdevice struct {
	ctrl     *gomock.Controller
	recorder *MockbluetootdeviceMockRecorder
	isgomock struct{}
}

// MockbluetootdeviceMockRecorder is the mock recorder for Mockbluetootdevice.
type MockbluetootdeviceMockRecorder struct {
	mock *Mockbluetootdevice
}

// NewMockbluetootdevice creates a new mock instance.
func NewMockbluetootdevice(ctrl *gomock.Controller) *Mockbluetootdevice {
	mock := &Mockbluetootdevice{ctrl: ctrl}
	mock.recorder = &MockbluetootdeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbluetootdevice) EXPECT() *MockbluetootdeviceMockRecorder {
	return m.recorder
}

// DiscoverCharacteristics mocks base method.
func (m *Mockbluetootdevice) DiscoverCharacteristics(uuids []bluetooth.UUID) ([]bluetooth.DeviceCharacteristic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverCharacteristics", uuids)
	ret0, _ := ret[0].([]bluetooth.DeviceCharacteristic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverCharacteristics indicates an expected call of DiscoverCharacteristics.
func (mr *MockbluetootdeviceMockRecorder) DiscoverCharacteristics(uuids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverCharacteristics", reflect.TypeOf((*Mockbluetootdevice)(nil).DiscoverCharacteristics), uuids)
}

// DiscoverServices mocks base method.
func (m *Mockbluetootdevice) DiscoverServices(uuids []bluetooth.UUID) ([]bluetooth.DeviceService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverServices", uuids)
	ret0, _ := ret[0].([]bluetooth.DeviceService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverServices indicates an expected call of DiscoverServices.
func (mr *MockbluetootdeviceMockRecorder) DiscoverServices(uuids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverServices", reflect.TypeOf((*Mockbluetootdevice)(nil).DiscoverServices), uuids)
}
